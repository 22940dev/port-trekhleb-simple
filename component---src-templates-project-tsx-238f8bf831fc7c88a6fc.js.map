{"version":3,"sources":["webpack://trekhleb.github.io/./src/components/elements/Project.tsx","webpack://trekhleb.github.io/./src/components/screens/ProjectScreen.tsx","webpack://trekhleb.github.io/./src/templates/Project.tsx"],"names":["props","project","projectTags","tags","Tags","numToShow","projectDates","DateRange","startDate","endDate","className","projectStars","getGitHubProjectStars","projectStarsLink","url","srcURL","caption","stars","Stars","link","projectSummaryLines","summary","map","summaryLine","index","key","projectSummary","defaultProjectUrl","archived","undefined","demoURL","demoLink","ButtonLink","startEnhancer","IoPlay","sourceCodeLink","FaGithub","projectCover","cover","FluidImage","image","archivedStamp","Row","Archived","actions","extraLinksList","links","length","extraLink","linkIndex","HyperLink","BiInfoCircle","size","externalLinks","projectDatesAndStars","Card","CardMedia","PageLayout","SEO","title","name","description","PageHeader","Badge","Alert","type","ErrorAlert","pageContext","projectID","projects"],"mappings":"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","file":"component---src-templates-project-tsx-238f8bf831fc7c88a6fc.js","sourcesContent":["import React from 'react';\nimport { IoPlay } from '@react-icons/all-files/io5/IoPlay';\nimport { FaGithub } from '@react-icons/all-files/fa/FaGithub';\nimport { BiInfoCircle } from '@react-icons/all-files/bi/BiInfoCircle';\n\nimport { Project as ProjectType } from '../../types/Project';\nimport DateRange from '../shared/DateRange';\nimport Card from '../shared/Card';\nimport CardMedia from '../shared/CardMedia';\nimport Tags from '../shared/Tags';\nimport FluidImage from '../shared/FluidImage';\nimport ButtonLink from '../shared/ButtonLink';\nimport Archived from '../shared/Archived';\nimport Stars from '../shared/Stars';\nimport Row from '../shared/Row';\nimport { getGitHubProjectStars } from '../../utils/project';\nimport { Link } from '../../types/Link';\nimport HyperLink from '../shared/HyperLink';\n\ntype ProjectProps = {\n  project: ProjectType | null,\n};\n\nconst tagsPerProject = 5;\n\nconst Project = (props: ProjectProps): React.ReactElement | null => {\n  const { project } = props;\n\n  if (!project) {\n    return null;\n  }\n\n  const projectTags = project?.tags ? (\n    <div>\n      <Tags tags={project.tags} numToShow={tagsPerProject} />\n    </div>\n  ) : null;\n\n  const projectDates = (\n    <DateRange\n      startDate={project.startDate}\n      endDate={project.endDate}\n      className=\"text-xs text-gray-500\"\n    />\n  );\n\n  const projectStars = getGitHubProjectStars(project);\n  const projectStarsLink: Link = {\n    url: project?.srcURL?.url,\n    caption: 'Stars on GitHub',\n  };\n  const stars = typeof projectStars === 'number' ? (\n    <Stars\n      stars={projectStars}\n      link={projectStarsLink}\n      className=\"text-xs text-gray-500 font-light\"\n    />\n  ) : null;\n\n  /* eslint-disable react/no-array-index-key */\n  const projectSummaryLines = project.summary ? project.summary.map(\n    (summaryLine: string | null, index: number) => (\n      <p key={index}>\n        {summaryLine}\n      </p>\n    ),\n  ) : null;\n\n  const projectSummary = projectSummaryLines ? (\n    <div className=\"mb-3 font-light\">\n      {projectSummaryLines}\n    </div>\n  ) : null;\n\n  const defaultProjectUrl = project.archived ? undefined : project.demoURL || project.srcURL;\n\n  const demoLink = project.demoURL && !project.archived ? (\n    <ButtonLink\n      link={project.demoURL}\n      startEnhancer={<IoPlay />}\n      className=\"mr-4\"\n    >\n      Demo\n    </ButtonLink>\n  ) : null;\n\n  const sourceCodeLink = project.srcURL && !project.archived ? (\n    <ButtonLink\n      link={project.srcURL}\n      startEnhancer={<FaGithub />}\n    >\n      Source Code\n    </ButtonLink>\n  ) : null;\n\n  const projectCover = project.cover ? (\n    <FluidImage image={project.cover} />\n  ) : null;\n\n  const archivedStamp = project?.archived ? (\n    <Row className=\"py-6\">\n      <Archived />\n    </Row>\n  ) : null;\n\n  const actions = demoLink || sourceCodeLink ? (\n    <Row className=\"py-6\">\n      {demoLink}\n      {sourceCodeLink}\n    </Row>\n  ) : null;\n\n  const extraLinksList = project?.links && project?.links.length\n    ? project?.links.map((extraLink: Link, linkIndex) => {\n      return (\n        <li key={linkIndex}>\n          <HyperLink\n            link={extraLink}\n            className=\"text-sm underline\"\n            startEnhancer={(<BiInfoCircle size={14} />)}\n          >\n            {extraLink?.caption || 'Read more'}\n          </HyperLink>\n        </li>\n      );\n    })\n    : null;\n\n  const externalLinks = extraLinksList ? (\n    <ul className=\"mt-3\">\n      {extraLinksList}\n    </ul>\n  ) : null;\n\n  const projectDatesAndStars = (\n    <Row className=\"mb-3 justify-between\">\n      <div>\n        {projectDates}\n      </div>\n      <div>\n        {stars}\n      </div>\n    </Row>\n  );\n\n  return (\n    <>\n      <div className=\"mb-6\">\n        <Card>\n          <CardMedia link={defaultProjectUrl} className=\"h-96\">\n            {projectCover}\n          </CardMedia>\n        </Card>\n      </div>\n      {projectDatesAndStars}\n      {projectSummary}\n      {projectTags}\n      {externalLinks}\n      {actions}\n      {archivedStamp}\n    </>\n  );\n};\n\nexport default Project;\n","import React from 'react';\n\nimport { Project as ProjectType } from '../../types/Project';\nimport PageLayout from '../layouts/PageLayout';\nimport PageHeader from '../shared/PageHeader';\nimport SEO from '../shared/SEO';\nimport Alert, { ErrorAlert } from '../shared/Alert';\nimport Project from '../elements/Project';\nimport Row from '../shared/Row';\nimport Badge from '../shared/Badge';\n\ntype ProjectScreenProps = {\n  project: ProjectType | null,\n};\n\nconst ProjectScreen = (props: ProjectScreenProps): React.ReactElement => {\n  const { project } = props;\n\n  if (!project) {\n    return (\n      <Alert type={ErrorAlert}>\n        Project not found\n      </Alert>\n    );\n  }\n\n  return (\n    <PageLayout>\n      <SEO\n        title={project?.name || ''}\n        description={project?.summary && project?.summary.length ? project.summary[0] : ''}\n      />\n      <Row>\n        <PageHeader>{project.name}</PageHeader>\n        <Badge className=\"ml-3 self-start\">project</Badge>\n      </Row>\n      <Project project={project} />\n    </PageLayout>\n  );\n};\n\nexport default ProjectScreen;\n","import * as React from 'react';\nimport { PageProps } from 'gatsby';\nimport ProjectScreen from '../components/screens/ProjectScreen';\nimport { projects } from '../data/projects';\nimport { ProjectID, Project as ProjectType } from '../types/Project';\n\ninterface ProjectProps extends PageProps {\n  pageContext: {\n    projectID: ProjectID,\n  },\n}\n\nconst Project = (props: ProjectProps): React.ReactElement => {\n  const { pageContext } = props;\n  const { projectID = null } = pageContext;\n\n  const project: ProjectType | null = projectID && (projectID in projects)\n    ? projects[projectID]\n    : null;\n\n  return (\n    <ProjectScreen project={project} />\n  );\n};\n\nexport default Project;\n"],"sourceRoot":""}